#include <iostream>#include <libcmmk.h>#include <unistd.h> /* usleep() */#include <signal.h>#include <stdio.h>#include <stdlib.h>#include <time.h>int g_stop = 0;static void interrupted(int sig) {	(void)sig;	g_stop = 1;}struct particle {	rgb color;	int x;	int y;}int cmmk_set_profile(struct cmmk *dev, int prof);int main(){	struct cmmk state;	int product;	if(cmmk_find_device(&product) != 0) {		std::cout << "could not find a device" << std::endl;		return 1;	}	if(cmmk_attach(&state, product, CMMK_LAYOUT_US_S) !=0) {		std::cout << "could not connect to device" << std::endl;	}	std::cout << "alright, let's go" << std::endl;	cmmk_set_control_mode(&state, CMMK_MANUAL);	signal(SIGINT, interrupted);	// initialization done, let's do stuff		struct rgb c_red = {		.R = 255,		.G = 0,		.B = 0 	};	struct rgb c_black = {		.R = 0,		.G = 0,		.B = 0 	};		struct cmmk_color_matrix matrix = {100};	for( uint i = 0; i < 6; i++ ) {		for( uint j = 0; j < 22; j++ ) {			matrix.data[i][j] = c_black;		}	}		uint pos1 = 0;	srand((unsigned int)time(NULL));	particle[154] particles;	while (!g_stop) {		usleep(80000);		//cmmk_set_single_key_by_id(&state, r, &(struct rgb){rand() % 255, rand() % 255, rand() % 255});		//matrix.data[rand()%6][rand()%22] = (struct rgb){rand() % 255, rand() % 255, rand() % 255};		matrix.data[particle[0].x][particle[0].y] = c_black;		pos1 = ++pos1 % 18;		matrix.data[1][pos1] = c_red;		cmmk_set_leds(&state, &matrix);	}	// give back control to keyboard firmware	cmmk_set_control_mode(&state, CMMK_FIRMWARE);	cmmk_detach(&state);	return 0;}